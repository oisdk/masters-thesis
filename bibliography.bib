
@article{abbottContainersConstructingStrictly2005,
  ids = {abbottContainersConstructingStrictly2005a},
  title = {Containers: {{Constructing}} Strictly Positive Types},
  shorttitle = {Containers},
  author = {Abbott, Michael and Altenkirch, Thorsten and Ghani, Neil},
  year = {2005},
  month = sep,
  volume = {342},
  pages = {3--27},
  issn = {0304-3975},
  doi = {10.1016/j.tcs.2005.06.002},
  abstract = {We introduce the notion of a Martin-L\"of category\textemdash a locally cartesian closed category with disjoint coproducts and initial algebras of container functors (the categorical analogue of W-types)\textemdash and then establish that nested strictly positive inductive and coinductive types, which we call strictly positive types, exist in any Martin-L\"of category. Central to our development are the notions of containers and container functors. These provide a new conceptual analysis of data structures and polymorphic functions by exploiting dependent type theory as a convenient way to define constructions in Martin-L\"of categories. We also show that morphisms between containers can be full and faithfully interpreted as polymorphic functions (i.e.natural transformations) and that, in the presence of W-types, all strictly positive types (including nested inductive and coinductive types) give rise to containers.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/TJP8YKNL/Abbott et al. - 2005 - Containers Constructing strictly positive types.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/6P7GRA5Q/S0304397505003373.html;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/H7GZ8KBM/S0304397505003373.html},
  journal = {Theoretical Computer Science},
  keywords = {Category theory,Coinduction,Container functors,Final coalgebras,Induction,Initial algebras,Type theory,W-Types},
  language = {en},
  number = {1},
  series = {Applied {{Semantics}}: {{Selected Topics}}}
}

@incollection{acuna-ortegaFinitenessDecidability1979,
  ids = {acuna-ortegaFinitenessDecidability1979a},
  title = {Finiteness and Decidability:{{I}}},
  shorttitle = {Finiteness and Decidability},
  booktitle = {Applications of {{Sheaves}}: {{Proceedings}} of the {{Research Symposium}} on {{Applications}} of {{Sheaf Theory}} to {{Logic}}, {{Algebra}}, and {{Analysis}}, {{Durham}}, {{July}} 9\textendash 21, 1977},
  author = {{Acu{\~n}a-Ortega}, O. and Linton, F. E. J.},
  editor = {Fourman, Michael and Mulvey, Christopher and Scott, Dana},
  year = {1979},
  volume = {753},
  pages = {80--100},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/BFb0061813},
  isbn = {978-3-540-34849-8},
  keywords = {Binary Product,Finite Limit,Full Subcategory,Global Element,Power Object},
  language = {en},
  series = {Lecture {{Notes}} in {{Mathematics}}}
}

@inproceedings{allaisGenericLevelPolymorphic2019,
  title = {Generic Level Polymorphic N-Ary Functions},
  booktitle = {Proceedings of the 4th {{ACM SIGPLAN International Workshop}} on {{Type}}-{{Driven Development}}  - {{TyDe}} 2019},
  author = {Allais, Guillaume},
  year = {2019},
  pages = {14--26},
  publisher = {{ACM Press}},
  address = {{Berlin, Germany}},
  doi = {10.1145/3331554.3342604},
  abstract = {Agda's standard library struggles in various places with nary functions and relations. It introduces congruence and substitution operators for functions of arities one and two, and provides users with convenient combinators for manipulating indexed families of arity exactly one.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/37UB3Z5C/Allais - 2019 - Generic level polymorphic n-ary functions.pdf},
  isbn = {978-1-4503-6815-5},
  language = {en}
}

@unpublished{altenkirchDefinableQuotientsType2011,
  title = {Definable {{Quotients}} in {{Type Theory}}},
  author = {Altenkirch, Thorsten and Anberr{\'e}e, Thomas and Li, Nuo},
  year = {2011},
  abstract = {In Type Theory, a quotient set is a set representing a setoid. Categorically, this corresponds to the concept of an exact coequalizer. In the present paper we consider the case of a definable quotients, where the quotient set arises as the codomain of a normalization function \textemdash this corresponds to the notion of a split coequalizer. We give a number of examples of definable quotients and notice that it is preferable to use the setoid structure when reasoning about the quotient set. We also show that there are examples where setoids cannot be represented in ordinary Type Theory such as the real numbers or the partiality monad under the assumption that local continuity is admissible in Type Theory.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/YQ3ZSEZA/Altenkirch et al. - DeÔ¨Ånable Quotients in Type Theory.pdf},
  language = {en}
}

@article{baezFiniteSetsFeynman2000,
  title = {From {{Finite Sets}} to {{Feynman Diagrams}}},
  author = {Baez, John C. and Dolan, James},
  year = {2000},
  month = apr,
  abstract = {`Categorification' is the process of replacing equations by isomorphisms. We describe some of the ways a thoroughgoing emphasis on categorification can simplify and unify mathematics. We begin with elementary arithmetic, where the category of finite sets serves as a categorified version of the set of natural numbers, with disjoint union and Cartesian product playing the role of addition and multiplication. We sketch how categorifying the integers leads naturally to the infinite loop space Omega\^infinity S\^infinity, and how categorifying the positive rationals leads naturally to a notion of the `homotopy cardinality' of a tame space. Then we show how categorifying formal power series leads to Joyal's `especes des structures', or `structure types'. We also describe a useful generalization of structure types called `stuff types'. There is an inner product of stuff types that makes the category of stuff types into a categorified version of the Hilbert space of the quantized harmonic oscillator. We conclude by sketching how this idea gives a nice explanation of the combinatorics of Feynman diagrams.},
  archivePrefix = {arXiv},
  eprint = {math/0004133},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/Q27EI2JR/Baez and Dolan - 2000 - From Finite Sets to Feynman Diagrams.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/6DYEJ4YQ/0004133.html},
  journal = {arXiv:math/0004133},
  keywords = {Mathematics - Category Theory,Mathematics - Combinatorics,Mathematics - History and Overview,Mathematics - Quantum Algebra}
}

@article{bellCategoriesToposesSets1982,
  ids = {bellCategoriesToposesSets1982a},
  title = {Categories, {{Toposes}} and {{Sets}}},
  author = {Bell, J. L.},
  year = {1982},
  volume = {51},
  pages = {293--337},
  issn = {0039-7857},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/AY4JFIGV/Bell - 1982 - Categories, toposes and sets.pdf},
  journal = {Synthese},
  number = {3}
}

@article{bergWtypesHomotopyType2015,
  title = {W-Types in {{Homotopy Type Theory}}},
  author = {van den Berg, Benno and Moerdijk, Ieke},
  year = {2015},
  month = nov,
  abstract = {We will give a detailed account of why the simplicial sets model of the univalence axiom due to Voevodsky also models W-types. In addition, we will discuss W-types in categories of simplicial presheaves and an application to models of set theory.},
  archivePrefix = {arXiv},
  eprint = {1307.2765},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/89X3BGXC/Berg and Moerdijk - 2015 - W-types in Homotopy Type Theory.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/FJAIQLVT/1307.html},
  journal = {arXiv:1307.2765 [math]},
  keywords = {03B15; 18G30; 68N18,Mathematics - Category Theory,Mathematics - Logic},
  primaryClass = {math}
}

@inproceedings{bertotCanonicalBigOperators2008,
  ids = {bertotCanonicalBigOperators2008},
  title = {Canonical {{Big Operators}}},
  booktitle = {Theorem {{Proving}} in {{Higher Order Logics}}},
  author = {Bertot, Yves and Gonthier, Georges and Ould Biha, Sidi and Pasca, Ioana},
  editor = {Mohamed, Otmane Ait and Mu{\~n}oz, C{\'e}sar and Tahar, Sofi{\`e}ne},
  year = {2008},
  volume = {5170},
  pages = {86--101},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-71067-7_11},
  abstract = {In this paper, we present an approach to describe uniformly iterated ``big'' operations, like {$\sum\mathsl{n}\mathsl{i}$}=0{$\mathsl{f}$}({$\mathsl{i}$}){$\sum$}i=0nf(i)\textbackslash sum\_\{i=0\}\^n f(i) or max i {$\in$} I f(i) and to provide lemmas that encapsulate all the commonly used reasoning steps on these constructs.We show that these iterated operations can be handled generically using the syntactic notation and canonical structure facilities provided by the Coq system. We then show how these canonical big operations played a crucial enabling role in the study of various parts of linear algebra and multi-dimensional real analysis, as illustrated by the formal proofs of the properties of determinants, of the Cayley-Hamilton theorem and of Kantorovitch's theorem.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/UW6ZDWM9/Bertot et al. - 2008 - Canonical Big Operators.pdf},
  isbn = {978-3-540-71065-3 978-3-540-71067-7},
  keywords = {Abelian Monoid,Canonical Structure,Functional Graph,Iterate Operation,Neutral Element},
  language = {en},
  series = {Lecture {{Notes}} in {{Computer Science}}}
}

@article{bezemStreamsThatAre2012,
  title = {On Streams That Are Finitely Red},
  author = {Bezem, Marc and Nakata, Keiko and Uustalu, Tarmo},
  year = {2012},
  month = oct,
  volume = {8},
  pages = {4},
  issn = {18605974},
  doi = {10.2168/LMCS-8(4:4)2012},
  abstract = {Mixing induction and coinduction, we study alternative definitions of streams being finitely red. We organize our definitions into a hierarchy including also some well-known alternatives in intuitionistic analysis. The hierarchy collapses classically, but is intuitionistically of strictly decreasing strength. We characterize the differences in strength in a precise way by weak instances of the Law of Excluded Middle.},
  archivePrefix = {arXiv},
  eprint = {1210.1200},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/2BIKLWMP/Bezem et al. - 2012 - On streams that are finitely red.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/FMAICEAV/1210.html},
  journal = {Logical Methods in Computer Science},
  keywords = {Computer Science - Logic in Computer Science,F.4.1},
  number = {4}
}

@article{birdCountdownCaseStudy2005,
  title = {Countdown: {{A}} Case Study in Origami Programming},
  shorttitle = {Countdown},
  author = {Bird, Richard and Mu, Shin-Cheng},
  year = {2005},
  month = aug,
  volume = {15},
  pages = {679},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S0956796805005642},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/5Y6P58XN/Bird and Mu - 2005 - Countdown A case study in origami programming.pdf},
  journal = {Journal of Functional Programming},
  language = {en},
  number = {05}
}

@inproceedings{birdFunctionalPearlTrouble2003,
  title = {Functional {{Pearl Trouble Shared}} Is {{Trouble Halved}}},
  booktitle = {Proceedings of the 2003 {{ACM SIGPLAN Workshop}} on {{Haskell}}},
  author = {Bird, Richard and Hinze, Ralf},
  year = {2003},
  pages = {1--6},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/871895.871896},
  abstract = {A nexus is a tree that contains shared nodes, nodes that have more than one incoming arc. Shared nodes are created in almost every functional program---for instance, when updating a purely functional data structure---though programmers are seldom aware of this. In fact, there are only a few algorithms that exploit sharing of nodes consciously. One example is constructing a tree in sublinear time. In this pearl we discuss an intriguing application of nexuses; we show that they serve admirably as memo structures featuring constant time access to memoized function calls. Along the way we encounter Boolean lattices and binomial trees.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/JCQDL8CP/Bird and Hinze - 2003 - Functional Pearl trouble shared is trouble halved.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/PURUEJ9R/Bird and Hinze - 2003 - Functional Pearl Trouble Shared is Trouble Halved.pdf},
  isbn = {978-1-58113-758-3},
  keywords = {binomial trees,boolean lattices,Haskell,memoization,purely functional data structures,sharing},
  series = {Haskell '03}
}

@book{bishopFoundationsConstructiveAnalysis1967,
  ids = {bishopFoundationsConstructiveAnalysis1967},
  title = {Foundations of {{Constructive Analysis}}},
  author = {Bishop, Errett},
  year = {1967},
  publisher = {{McGraw-Hill}},
  address = {{New York}},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/CPKS4BKX/Foundations-of-constructive-analysis-McGraw-Hill-series-in-higher-mathematics-.pdf},
  keywords = {Foundations,Mathematical analysis},
  language = {en},
  lccn = {QA300 .B55},
  series = {{{McGraw}}-{{Hill}} Series in Higher Mathematics}
}

@article{boomFurtherThoughtsAbstracto1981,
  title = {Further Thoughts on {{Abstracto}}},
  author = {Boom, H. J.},
  year = {1981},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/V89FEISE/Abstracto_reader.pdf},
  journal = {Working Paper ELC-9, IFIP WG 2.1}
}

@article{bradyIdrisGeneralpurposeDependently2013,
  title = {Idris, a General-Purpose Dependently Typed Programming Language: {{Design}} and Implementation},
  author = {Brady, Edwin},
  year = {2013},
  month = sep,
  volume = {23},
  pages = {552--593},
  issn = {1469-7653},
  doi = {10.1017/S095679681300018X},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/AJNPHXQQ/impldtp.pdf},
  journal = {Journal of Functional Programming},
  number = {05}
}

@incollection{bunkenburgBoomHierarchy1994,
  title = {The {{Boom Hierarchy}}},
  booktitle = {Functional {{Programming}}, {{Glasgow}} 1993},
  author = {Bunkenburg, Alexander},
  editor = {O'Donnell, John T. and Hammond, Kevin},
  year = {1994},
  pages = {1--8},
  publisher = {{Springer London}},
  doi = {10.1007/978-1-4471-3236-3_1},
  abstract = {The Boom Hierarchy is the family of data structures tree, list, bag, set. By combining their properties in other ways, more data structures can be made, like mobiles. The paper defines the data structures of this extended Boom Hierarchy and shows how the functions reduce, map, and filter are applied to them.},
  copyright = {\textcopyright 1994 British Computer Society},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/H993N7KW/10.1.1.49.3252.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/6V7TNBIH/10.html},
  isbn = {978-3-540-19879-6 978-1-4471-3236-3},
  keywords = {Programming Techniques},
  language = {en},
  series = {Workshops in {{Computing}}}
}

@misc{caretteAgdaAgdacategories2020,
  title = {Agda/Agda-Categories},
  author = {Carette, Jacques and Hu, Jason Z. S. and Sandro, Stucki and Allais, Guillaume},
  year = {2020},
  month = jun,
  abstract = {A new Categories library for Agda. Contribute to agda/agda-categories development by creating an account on GitHub.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/ABLW2MSQ/agda-categories.html}
}

@article{claessenQuickCheckLightweightTool2011,
  title = {{{QuickCheck}}: {{A Lightweight Tool}} for {{Random Testing}} of {{Haskell Programs}}},
  shorttitle = {{{QuickCheck}}},
  author = {Claessen, Koen and Hughes, John},
  year = {2011},
  month = may,
  volume = {46},
  pages = {53--64},
  issn = {0362-1340},
  doi = {10.1145/1988042.1988046},
  abstract = {QuickCheck is a tool which aids the Haskell programmer in formulating and testing properties of programs. Properties are discribed as Haskell functions, and can be automatically tested on random input, but it is also possible to define custom test data generators. We present a number of case studies, in which the tool was successfully used, and also point out some pitfalls to avoid. Random testing is especially suitable for functional programs because properties can be stated at a fine grain. When a function is built from separately tested components, then random testing suffuces to obtain good coverage of the definition under test.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/2CXEEKFA/f613080f69d4d3e005f0133c64d44a5bb902.pdf},
  journal = {SIGPLAN Not.},
  number = {4}
}

@article{cohenCubicalTypeTheory2016,
  title = {Cubical {{Type Theory}}: A Constructive Interpretation of the Univalence Axiom},
  shorttitle = {Cubical {{Type Theory}}},
  author = {Cohen, Cyril and Coquand, Thierry and Huber, Simon and M{\"o}rtberg, Anders},
  year = {2016},
  month = nov,
  pages = {34},
  abstract = {This paper presents a type theory in which it is possible to directly manipulate \$n\$-dimensional cubes (points, lines, squares, cubes, etc.) based on an interpretation of dependent type theory in a cubical set model. This enables new ways to reason about identity types, for instance, function extensionality is directly provable in the system. Further, Voevodsky's univalence axiom is provable in this system. We also explain an extension with some higher inductive types like the circle and propositional truncation. Finally we provide semantics for this cubical type theory in a constructive meta-theory.},
  archivePrefix = {arXiv},
  eprint = {1611.02108},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/JPB35LT3/Cohen et al. - 2016 - Cubical Type Theory a constructive interpretation.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/SAVUJFRF/Cohen et al. - 2016 - Cubical Type Theory a constructive interpretation.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/WNZZ885E/Cohen et al. - 2016 - Cubical Type Theory a constructive interpretation.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/YYV2LT9Q/Cohen et al. - Cubical Type Theory a constructive interpretation.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/JRUQW2TM/1611.html;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/V8XZUFR6/1611.html},
  journal = {arXiv:1611.02108 [cs, math]},
  keywords = {Computer Science - Logic in Computer Science,F.3.2,F.4.1,Mathematics - Logic},
  language = {en},
  primaryClass = {cs, math}
}

@inproceedings{coquandConstructivelyFinite2010,
  ids = {spiwackConstructivelyFinite2010},
  title = {Constructively Finite?},
  booktitle = {Contribuciones Cient\'ificas En Honor de {{Mirian Andr\'es G\'omez}}},
  author = {Coquand, Thierry and Spiwack, Arnaud},
  year = {2010},
  pages = {217--230},
  publisher = {{Universidad de La Rioja}},
  abstract = {This articles plays with several properties of Bishop sets which would be equivalent in ZFC to being finite. One of which is new. This is an occasion to analyse finely the different properties of finite sets and how they (constructively) relate to one another. We close this article by presenting a few well-known algorithms on finite structures, and describe which kind of finiteness they require.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/4A49ZUBX/Spiwack and Coquand - 2010 - Constructively Finite.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/DX5RIWTP/Coquand and Spiwack - 2010 - Constructively finite.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/YY82SENZ/inria-00503917.html},
  language = {en}
}

@inproceedings{danielssonBagEquivalenceProofRelevant2012,
  title = {Bag {{Equivalence}} via a {{Proof}}-{{Relevant Membership Relation}}},
  booktitle = {Interactive {{Theorem Proving}}},
  author = {Danielsson, Nils Anders},
  year = {2012},
  month = aug,
  pages = {149--165},
  publisher = {{Springer, Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-32347-8_11},
  abstract = {Two lists are bag equivalent if they are permutations of each other, i.e. if they contain the same elements, with the same multiplicity, but perhaps not in the same order. This paper describes how one can define bag equivalence as the presence of bijections between sets of membership proofs. This definition has some desirable properties: Many bag equivalences can be proved using a flexible form of equational reasoning. The definition generalises easily to arbitrary unary containers, including types with infinite values, such as streams. By using a slight variation of the definition one gets set equivalence instead, i.e. equality up to order and multiplicity. Other variations give the subset and subbag preorders. The definition works well in mechanised proofs.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/48TN8RVW/Danielsson - 2012 - Bag Equivalence via a Proof-Relevant Membership Re.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/6FHBRC2J/Danielsson - 2012 - Bag Equivalence via a Proof-Relevant Membership Re.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/Z3C57Z7B/10.html},
  isbn = {978-3-642-32346-1 978-3-642-32347-8},
  language = {en},
  series = {Lecture {{Notes}} in {{Computer Science}}}
}

@article{devrieseBrightSideType2011,
  ids = {devriese\_bright\_nodate,devriesedominiqueBrightSideType2011},
  title = {On the Bright Side of Type Classes: Instance Arguments in {{Agda}}},
  shorttitle = {On the Bright Side of Type Classes},
  author = {Devriese, Dominique and Piessens, Frank},
  year = {2011},
  month = sep,
  volume = {46},
  pages = {143},
  issn = {03621340},
  doi = {10.1145/2034574.2034796},
  abstract = {We present instance arguments: an alternative to type classes and related features in the dependently typed, purely functional programming language/proof assistant Agda. They are a new, general type of function arguments, resolved from call-site scope in a typedirected way. The mechanism is inspired by both Scala's implicits and Agda's existing implicit arguments, but differs from both in important ways. Our mechanism is designed and implemented for Agda, but our design choices can be applied to other programming languages as well.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/9Q8UPZN3/Devriese and Piessens - On the Bright Side of Type Classes Instance Argum.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/XZW44SIH/Devriese and Piessens - 2011 - On the bright side of type classes instance argum.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/CPZVL9B2/2034574.html},
  journal = {ACM SIGPLAN Notices},
  language = {en},
  number = {9}
}

@article{escardoExhaustibleSetsHighertype2008,
  title = {Exhaustible Sets in Higher-Type Computation},
  author = {Escardo, Martin},
  year = {2008},
  month = aug,
  volume = {Volume 4, Issue 3},
  abstract = {We say that a set is exhaustible if it admits algorithmic universal quantification for continuous predicates in finite time, and searchable if there is an algorithm that, given any continuous predicate, either selects an element for which the predicate holds or else tells there is no example. The Cantor space of infinite sequences of binary digits is known to be searchable. Searchable sets are exhaustible, and we show that the converse also holds for sets of hereditarily total elements in the hierarchy of continuous functionals; moreover, a selection functional can be constructed uniformly from a quantification functional. We prove that searchable sets are closed under intersections with decidable sets, and under the formation of computable images and of finite and countably infinite products. This is related to the fact, established here, that exhaustible sets are topologically compact. We obtain a complete description of exhaustible total sets by developing a computational version of a topological Arzela--Ascoli type characterization of compact subsets of function spaces. We also show that, in the non-empty case, they are precisely the computable images of the Cantor space. The emphasis of this paper is on the theory of exhaustible and searchable sets, but we also briefly sketch applications.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/WT9N23T4/Escardo - 2008 - Exhaustible sets in higher-type computation.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/EEEDUK3G/693.html},
  journal = {Logical Methods in Computer Science},
  language = {en}
}

@inproceedings{escardoInfiniteSetsThat2007,
  title = {Infinite Sets That Admit Fast Exhaustive Search},
  booktitle = {22nd {{Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}} ({{LICS}} 2007)},
  author = {Escardo, Martin},
  year = {2007},
  pages = {443--452},
  publisher = {{IEEE}},
  address = {{Wroclaw, Poland}},
  doi = {10.1109/LICS.2007.25},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/SENA9H3F/Escardo - 2007 - Infinite sets that admit fast exhaustive search.pdf},
  isbn = {978-0-7695-2908-0},
  language = {en}
}

@article{escardoInfiniteSetsThat2013,
  ids = {escardoInfiniteSetsThat2013},
  title = {Infinite Sets That {{Satisfy}} the {{Principle}} of {{Omniscience}} in Any {{Variety}} of {{Constructive Mathematics}}},
  author = {Escard{\'o}, Mart{\'i}n H.},
  year = {2013},
  month = sep,
  volume = {78},
  pages = {764--784},
  issn = {0022-4812, 1943-5886},
  doi = {10.2178/jsl.7803040},
  abstract = {We show that there are plenty of infinite sets that satisfy the omniscience principle, in a minimalistic setting for constructive mathematics that is compatible with classical mathematics. A first example of an omniscient set is the one-point compactification of the natural numbers, also known as the generic convergent sequence. We relate this to Grilliot's and Ishihara's Tricks. We generalize this example to many infinite subsets of the Cantor space. These subsets turn out to be ordinals in a constructive sense, with respect to the lexicographic order, satisfying both a well-foundedness condition with respect to decidable subsets, and transfinite induction restricted to decidable predicates. The use of simple types allows us to reach any ordinal below {$\epsilon$}Q, and richer type systems allow us to get higher.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/6H9Q8Q8A/Escard√≥ - 2013 - Infinite sets that Satisfy the Principle of Omnisc.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/CKLD89PY/Escard√≥ - 2013 - Infinite sets that Satisfy the Principle of Omnisc.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/H6XN99YN/Escard√≥ - 2013 - Infinite sets that Satisfy the Principle of Omnisc.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/PTKCLWTC/0D204ADE629B703578B848B8573FC83D.html},
  journal = {The Journal of Symbolic Logic},
  language = {en},
  number = {3}
}

@inproceedings{firsovDependentlyTypedProgramming2015,
  title = {Dependently Typed Programming with Finite Sets},
  booktitle = {Proceedings of the 11th {{ACM SIGPLAN Workshop}} on {{Generic Programming}} - {{WGP}} 2015},
  author = {Firsov, Denis and Uustalu, Tarmo},
  year = {2015},
  pages = {33--44},
  publisher = {{ACM Press}},
  address = {{Vancouver, BC, Canada}},
  doi = {10.1145/2808098.2808102},
  abstract = {Definitions of many mathematical structures used in computer science are parametrized by finite sets. To work with such structures in proof assistants, we need to be able to explain what a finite set is. In constructive mathematics, a widely used definition is listability: a set is considered to be finite, if its elements can be listed completely. In this paper, we formalize different variations of this definition in the Agda programming language. We develop a toolbox for boilerplate-free programming with finite sets that arise as subsets of some base set with decidable equality. Among other things we implement combinators for defining functions from finite sets and a prover for quantified formulas over decidable properties on finite sets.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/4MGFKKTP/Firsov and Uustalu - 2015 - Dependently typed programming with finite sets.pdf},
  isbn = {978-1-4503-3810-3},
  language = {en}
}

@article{firsovVariationsNoetherianness2016,
  ids = {firsovVariationsNoetherianness2016},
  title = {Variations on {{Noetherianness}}},
  author = {Firsov, Denis and Uustalu, Tarmo and Veltri, Niccol{\`o}},
  year = {2016},
  month = apr,
  volume = {207},
  pages = {76--88},
  issn = {2075-2180},
  doi = {10.4204/EPTCS.207.4},
  abstract = {In constructive mathematics, several nonequivalent notions of finiteness exist. In this paper, we continue the study of Noetherian sets in the dependently typed setting of the Agda programming language. We want to say that a set is Noetherian, if, when we are shown elements from it one after another, we will sooner or later have seen some element twice. This idea can be made precise in a number of ways. We explore the properties and connections of some of the possible encodings. In particular, we show that certain implementations imply decidable equality while others do not, and we construct counterexamples in the latter case. Additionally, we explore the relation between Noetherianness and other notions of finiteness.},
  archivePrefix = {arXiv},
  eprint = {1604.01186},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/QLSZIV5G/Firsov et al. - 2016 - Variations on Noetherianness.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/WQB4B4EL/Firsov et al. - 2016 - Variations on Noetherianness.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/CI6FAX9P/1604.html},
  journal = {Electronic Proceedings in Theoretical Computer Science},
  keywords = {Computer Science - Logic in Computer Science,Computer Science - Programming Languages,F.4.1}
}

@article{flajoletCalculusRandomGeneration1994,
  title = {A {{Calculus}} for the {{Random Generation}} of {{Labelled Combinatorial Structures}}},
  author = {Flajolet, Philippe and Zimmermann, Paul and Van Cutsem, Bernard},
  year = {1994},
  month = sep,
  volume = {132},
  pages = {1--35},
  issn = {0304-3975},
  doi = {10.1016/0304-3975(94)90226-7},
  abstract = {A systematic approach to the random generation of labelled combinatorial objects is presented. It applies to structures that are decomposable, i.e., formally specifiable by grammars involving set, sequence, and cycle constructions. A general strategy is developed for solving the random generation problem with two closely related types of methods: for structures of size n, the boustrophedonic algorithms exhibit a worst-case behaviour of the form O(n log n); the sequential algorithms have worst case O(n2), while offering good potential for optimizations in the average case. The complexity model is in terms of arithmetic operations and both methods appeal to precomputed numerical table of linear size that can be computed in time O(n2).A companion calculus permits systematically to compute the average case cost of the sequential generation algorithm associated to a given specification. Using optimizations dictated by the cost calculus, several random generation algorithms of the sequential type are developed; most of them have expected complexity 1/2n log n, and are thus only slightly superlinear. The approach is exemplified by the random generation of a number of classical combinatorial structures including Cayley trees, hierarchies, the cycle decomposition of permutations, binary trees, functional graphs, surjections, and set partitions.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/NPGKZ2QQ/Flajolet et al. - 1994 - A Calculus for the Random Generation of Labelled C.pdf},
  journal = {Theor. Comput. Sci.},
  number = {1}
}

@inproceedings{fruminFiniteSetsHomotopy2018,
  title = {Finite {{Sets}} in {{Homotopy Type Theory}}},
  booktitle = {Proceedings of the 7th {{ACM SIGPLAN International Conference}} on {{Certified Programs}} and {{Proofs}}},
  author = {Frumin, Dan and Geuvers, Herman and Gondelman, L{\'e}on and van der Weide, Niels},
  year = {2018},
  pages = {201--214},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3167085},
  abstract = {We study different formalizations of finite sets in homotopy type theory to obtain a general definition that exhibits both the computational facilities and the proof principles expected from finite sets. We use higher inductive types to define the type K(A) of "finite sets over type A" \`a la Kuratowski without assuming that K(A) has decidable equality. We show how to define basic functions and prove basic properties after which we give two applications of our definition.  On the foundational side, we use K to define the notions of "Kuratowski-finite type" and "Kuratowski-finite subobject", which we contrast with established notions, e.g. Bishop-finite types and enumerated types. We argue that Kuratowski-finiteness is the most general and flexible one of those and we define the usual operations on finite types and subobjects.  From the computational perspective, we show how to use K(A) for an abstract interface for well-known finite set implementations such as tree- and list-like data structures. This implies that a function defined on a concrete finite sets implementation can be obtained from a function defined on the abstract finite sets K(A) and that correctness properties are inherited. Hence, HoTT is the ideal setting for data refinement. Beside this, we define bounded quantification, which lifts a decidable property on A to one on K(A).},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/CKKYWGDG/Frumin et al. - 2018 - Finite Sets in Homotopy Type Theory.pdf},
  isbn = {978-1-4503-5586-5},
  keywords = {Coq,finite sets,finite types,higher inductive types,homotopy type theory},
  series = {{{CPP}} 2018}
}

@book{ghilezan22ndInternationalConference2018,
  title = {22nd {{International Conference}} on {{Types}} for {{Proofs}} and {{Programs}} ({{TYPES}} 2016)},
  author = {Ghilezan, Silvia and Geuvers, Herman and Ivetic, Jelena},
  year = {2018},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/YRHLMN2J/Ghilezan et al. - 2018 - 22nd International Conference on Types for Proofs .pdf},
  isbn = {978-3-95977-065-1},
  language = {en}
}

@phdthesis{girardInterpretationFonctionelleElimination1972,
  title = {{Interpr\'etation fonctionelle et \'elimination des coupures de l'arithm\'etique d'ordre sup\'erieur}},
  author = {Girard, Jean-Yves},
  year = {1972},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/QLIN2G73/Girard - Interpr√©tation fonctionnelle et √©limination des co.pdf},
  language = {fr},
  school = {PhD thesis, Universit\'e Paris VII},
  type = {{PhD Thesis}}
}

@article{hedbergCoherenceTheoremMartinLof1998,
  title = {A Coherence Theorem for {{Martin}}-{{L\"of}}'s Type Theory},
  author = {Hedberg, Michael},
  year = {1998},
  month = jul,
  volume = {8},
  pages = {413--436},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S0956796898003153},
  abstract = {In type theory a proposition is represented by a type, the type of its proofs. As a consequence, the equality relation on a certain type is represented by a binary family of types. Equality on a type may be conventional or inductive. Conventional equality means that one particular equivalence relation is singled out as the equality, while inductive equality \textendash{} which we also call identity \textendash{} is inductively defined as the `smallest reflexive relation'. It is sometimes convenient to know that the type representing a proposition is collapsed, in the sense that all its inhabitants are identical. Although uniqueness of identity proofs for an arbitrary type is not derivable inside type theory, there is a large class of types for which it may be proved. Our main result is a proof that any type with decidable identity has unique identity proofs. This result is convenient for proving that the class of types with decidable identities is closed under indexed sum. Our proof of the main result is completely formalized within a kernel fragment of Martin-Lo\textasciidieresis f's type theory and mechanized using ALF. Proofs of auxiliary lemmas are explained in terms of the category theoretical properties of identity. These suggest two coherence theorems as the result of rephrasing the main result in a context of conventional equality, where the inductive equality has been replaced by, in the former, an initial category structure and, in the latter, a smallest reflexive relation.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/HPIG33ZY/Hedberg - 1998 - A coherence theorem for Martin-L√∂f's type theory.pdf},
  journal = {Journal of Functional Programming},
  language = {en},
  number = {4}
}

@article{henryMeasureTheoryBoolean2017,
  title = {Measure Theory over Boolean Toposes},
  author = {Henry, Simon},
  year = {2017},
  month = jul,
  volume = {163},
  pages = {1--21},
  issn = {0305-0041, 1469-8064},
  doi = {10.1017/S0305004116000700},
  abstract = {In this paper we develop a notion of measure theory over boolean toposes which is analogous to noncommutative measure theory, i.e. to the theory of von Neumann algebras. This is part of a larger project to study relations between topos theory and noncommutative geometry. The main result is a topos theoretic version of the modular time evolution of von Neumann algebra which take the form of a canonical R+*-principal bundle over any integrable locally separated boolean topos.},
  archivePrefix = {arXiv},
  eprint = {1411.1605},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/QS8CV9H7/Henry - 2017 - Measure theory over boolean toposes.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/KMVMB5YS/1411.html},
  journal = {Mathematical Proceedings of the Cambridge Philosophical Society},
  keywords = {18B25; 03G30; 46L10; 46L51,Mathematics - Category Theory,Mathematics - Operator Algebras},
  number = {1}
}

@article{henryToposesGeneratedCardinal2018,
  ids = {henryToposesGeneratedCardinal2016},
  title = {On Toposes Generated by Cardinal Finite Objects},
  author = {Henry, Simon},
  year = {2018},
  month = sep,
  volume = {165},
  pages = {209--223},
  issn = {0305-0041, 1469-8064},
  doi = {10.1017/S0305004117000408},
  abstract = {We give a characterisations of toposes which admit a generating set of objects which are internally cardinal finite (i.e. Kuratowski finite and decidable) in terms of ``topological'' conditions. The central result is that, constructively, a hyperconnected separated locally decidable topos admit a generating set of cardinal finite objects. The main theorem is then a generalisation obtained as an application of this result internally in the localic reflection of an arbitrary topos: a topos is generated by cardinal finite objects if and only if it is separated, locally decidable, and its localic reflection is zero dimensional.},
  archivePrefix = {arXiv},
  eprint = {1505.04987},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/FTT6H3WD/Henry - 2016 - On toposes generated by cardinal finite objects.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/SNII6JF9/Henry - 2018 - On toposes generated by cardinal finite objects.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/44QP76A3/1505.html;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/BE5S9KGH/98A60656FC9E5E3B4A746EA6C3F0ADF0.html},
  journal = {Mathematical Proceedings of the Cambridge Philosophical Society},
  keywords = {18B25; 03G30,Mathematics - Category Theory},
  language = {en},
  number = {2}
}

@book{hottbook,
  title = {Homotopy Type Theory: Univalent Foundations of Mathematics},
  author = {Univalent Foundations Program, The},
  year = {2013},
  publisher = {{https://homotopytypetheory.org/book}},
  address = {{Institute for Advanced Study}},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/2DBX2Y6M/Univalent Foundations Program - 2013 - Homotopy type theory univalent foundations of mat.pdf}
}

@article{huProofrelevantCategoryTheory2020,
  ids = {huProofrelevantCategoryTheory2020a},
  title = {Proof-Relevant {{Category Theory}} in {{Agda}}},
  author = {Hu, Jason Z. S. and Carette, Jacques},
  year = {2020},
  month = may,
  abstract = {The generality and pervasiness of category theory in modern mathematics makes it a frequent and useful target of formalization. It is however quite challenging to formalize, for a variety of reasons. Agda currently (i.e. in 2020) does not have a standard, working formalization of category theory. We document our work on solving this dilemma. The formalization revealed a number of potential design choices, and we present, motivate and explain the ones we picked. In particular, we find that alternative definitions or alternative proofs from those found in standard textbooks can be advantageous, as well as "fit" Agda's type theory more smoothly. Some definitions regarded as equivalent in standard textbooks turn out to make different "universe level" assumptions, with some being more polymorphic than others. We also pay close attention to engineering issues, in particular so that the library integrates well with Agda's own standard library, as well as supporting as many of the modes of Agda as possible.},
  archivePrefix = {arXiv},
  eprint = {2005.07059},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/BUNG3ZUG/Hu and Carette - 2020 - Proof-relevant Category Theory in Agda.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/FN5ZFCDQ/Hu and Carette - 2020 - Proof-relevant Category Theory in Agda.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/5HXY7SBK/2005.html;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/VGT4AJ6S/2005.html},
  journal = {arXiv:2005.07059 [cs]},
  keywords = {Computer Science - Logic in Computer Science},
  primaryClass = {cs}
}

@article{huttonCountdownProblem2002,
  title = {The {{Countdown Problem}}},
  author = {Hutton, Graham},
  year = {2002},
  month = nov,
  volume = {12},
  pages = {609--616},
  issn = {0956-7968},
  doi = {10.1017/S0956796801004300},
  abstract = {We systematically develop a functional program that solves the countdown problem, a numbers game in which the aim is to construct arithmetic expressions satisfying certain constraints. Starting from a formal specification of the problem, we present a simple but inefficient program that solves the problem, and prove that this program is correct. We then use program fusion to calculate an equivalent but more efficient program, which is then further improved by exploiting arithmetic properties.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/P3QZZ3QF/HUTTON - FUNCTIONAL PEARL The countdown problem.pdf},
  journal = {J. Funct. Program.},
  number = {6}
}

@misc{iversenFredefoxCat2018,
  title = {Fredefox/Cat},
  author = {Iversen, Frederik Hangh{\o}j},
  year = {2018},
  month = may,
  abstract = {A formalization of category theory in cubical Agda},
  keywords = {agda,category-theory,homotopy-type-theory}
}

@phdthesis{iversenUnivalentCategoriesFormalization2018,
  title = {Univalent {{Categories}}: {{A}} Formalization of Category Theory in {{Cubical Agda}}},
  shorttitle = {Univalent {{Categories}}},
  author = {Iversen, Frederik Hangh{\o}j},
  year = {2018},
  address = {{G\"oteborg, Sweden}},
  abstract = {The usual notion of propositional equality in intensional type-theory is restrictive. For instance it does not admit functional extensionality nor univalence. This poses a severe limitation on both what is provable and the re-usability of proofs. Recent developments have, however, resulted in cubical type theory, which permits a constructive proof of univalence. The programming language Agda has been extended with capabilities for working in such a cubical setting. This thesis will explore the usefulness of this extension in the context of category theory. The thesis will motivate the need for univalence and explain why propositional equality in cubical Agda is more expressive than in standard Agda. Alternative approaches to Cubical Agda will be presented and their pros and cons will be explained. As an example of the application of univalence, two formulations of monads will be presented: Namely monads in the monoidal form and monads in the Kleisli form. Using univalence, it will be shown how these are equal. Finally the thesis will explain the challenges that a developer will face when working with cubical Agda and give some techniques to overcome these difficulties. It will suggest how further work can help alleviate some of these challenges.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/HAWR9Q66/Iversen - Univalent Categories.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/I7P33FKV/Iversen - 2018 - Univalent Categories A formalization of category t.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/8W5H2IG2/256404.html},
  language = {eng},
  school = {Chalmers University of Technology},
  type = {Master's {{Thesis}}}
}

@inproceedings{johnstoneAlgebraicTheoriesToposes1978,
  title = {Algebraic Theories in Toposes},
  booktitle = {Indexed {{Categories}} and {{Their Applications}}},
  author = {Johnstone, Peter T. and Wraith, Gavin C.},
  editor = {Johnstone, Peter T. and Par{\'e}, Robert and Rosebrugh, R. D. and Schumacher, D. and Wood, R. J. and Wraith, G. C.},
  year = {1978},
  pages = {141--242},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/BFb0061363},
  isbn = {978-3-540-35762-9},
  keywords = {Algebraic Theory,Forgetful Functor,Inclusion Functor,Monoid Structure,Monoidal Category},
  language = {en},
  series = {Lecture {{Notes}} in {{Mathematics}}}
}

@book{johnstoneSketchesElephantTopos2002,
  title = {Sketches of an {{Elephant}}: {{A Topos Theory Compendium}}},
  shorttitle = {Sketches of an {{Elephant}}},
  author = {Johnstone, Peter T. and Johnstone, Reader in the Foundations of Mathematics P. T.},
  year = {2002},
  month = sep,
  publisher = {{Clarendon Press}},
  abstract = {Topos Theory is a subject that stands at the junction of geometry, mathematical logic and theoretical computer science, and it derives much of its power from the interplay of ideas drawn from these different areas. Because of this, an account of topos theory which approaches the subject from one particular direction can only hope to give a partial picture; the aim of this compendium is to present as comprehensive an account as possible of all the main approaches and thereby to demonstrate the overall unity of the subject. The material is organized in such a way that readers interested in following a particular line of approach may do so by starting at an appropriate point in the text.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/RU6G6J3E/Johnstone and Johnstone - 2002 - Sketches of an Elephant A Topos Theory Compendium.pdf},
  googlebooks = {TLHfQPHNs0QC},
  isbn = {978-0-19-851598-2},
  keywords = {Mathematics / Geometry / Algebraic,Mathematics / History \& Philosophy,Mathematics / Logic},
  language = {en}
}

@article{krausGeneralUniversalProperty2015,
  ids = {krausGeneralUniversalProperty2015a},
  title = {The {{General Universal Property}} of the {{Propositional Truncation}}},
  author = {Kraus, Nicolai},
  year = {2015},
  month = sep,
  pages = {35 pages},
  doi = {10.4230/LIPIcs.TYPES.2014.111},
  abstract = {In a type-theoretic fibration category in the sense of Shulman (representing a dependent type theory with at least 1, Sigma, Pi, and identity types), we define the type of constant functions from A to B. This involves an infinite tower of coherence conditions, and we therefore need the category to have Reedy limits of diagrams over omega. Our main result is that, if the category further has propositional truncations and satisfies function extensionality, the type of constant function is equivalent to the type ||A|| -{$>$} B. If B is an n-type for a given finite n, the tower of coherence conditions becomes finite and the requirement of nontrivial Reedy limits vanishes. The whole construction can then be carried out in Homotopy Type Theory and generalises the universal property of the truncation. This provides a way to define functions ||A|| -{$>$} B if B is not known to be propositional, and it streamlines the common approach of finding a proposition Q with A -{$>$} Q and Q -{$>$} B.},
  archivePrefix = {arXiv},
  eprint = {1411.2682},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/8UUJD3GI/Kraus - 2015 - The General Universal Property of the Propositiona.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/UT7FWEVL/Kraus - 2015 - The General Universal Property of the Propositiona.pdf},
  journal = {arXiv:1411.2682 [math]},
  keywords = {F.4.1,Mathematics - Logic},
  language = {en},
  primaryClass = {math}
}

@article{krausNotionsAnonymousExistence2017,
  title = {Notions of {{Anonymous Existence}} in {{Martin}}-{{L}}\textbackslash "of {{Type Theory}}},
  author = {Kraus, Nicolai and Escard{\'o}, Mart{\'i}n and Coquand, Thierry and Altenkirch, Thorsten},
  year = {2017},
  pages = {Issue 1 ; 18605974},
  issn = {1860-5974},
  doi = {10.23638/LMCS-13(1:15)2017},
  abstract = {As the groupoid model of Hofmann and Streicher proves, identity proofs in intensional Martin-L\textbackslash "of type theory cannot generally be shown to be unique. Inspired by a theorem by Hedberg, we give some simple characterizations of types that do have unique identity proofs. A key ingredient in these constructions are weakly constant endofunctions on identity types. We study such endofunctions on arbitrary types and show that they always factor through a propositional type, the truncated or squashed domain. Such a factorization is impossible for weakly constant functions in general (a result by Shulman), but we present several non-trivial cases in which it can be done. Based on these results, we define a new notion of anonymous existence in type theory and compare different forms of existence carefully. In addition, we show possibly surprising consequences of the judgmental computation rule of the truncation, in particular in the context of homotopy type theory. All the results have been formalized and verified in the dependently typed programming language Agda.},
  archivePrefix = {arXiv},
  eprint = {1610.03346},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/KZJWF6RR/Kraus et al. - 2017 - Notions of Anonymous Existence in Martin-Lof Typ.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/Z7BHW3B2/1610.html},
  journal = {Logical Methods in Computer Science ; Volume 13},
  keywords = {03B15,Computer Science - Logic in Computer Science,F.4.1}
}

@article{kuratowskiNotionEnsembleFini1920,
  title = {{Sur la notion d'ensemble fini}},
  author = {Kuratowski, Casimir},
  year = {1920},
  volume = {1},
  pages = {129--131},
  issn = {0016-2736},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/K77HL5NV/212596.html},
  journal = {Fundamenta Mathematicae},
  language = {fra},
  number = {1}
}

@book{martin-lofIntuitionisticTypeTheory1980,
  title = {Intuitionistic {{Type Theory}}},
  author = {{Martin-L{\"o}f}, Per},
  year = {1980},
  month = jun,
  address = {{Padua}},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/IQS3729C/MartinL√∂f1984.pdf}
}

@article{mcbrideApplicativeProgrammingEffects2008,
  ids = {mcbrideApplicativeProgrammingEffects2008a},
  title = {Applicative Programming with Effects},
  author = {McBride, Conor and Paterson, Ross},
  year = {2008},
  month = jan,
  volume = {18},
  pages = {1--13},
  publisher = {{Cambridge University Press}},
  issn = {1469-7653, 0956-7968},
  doi = {10.1017/S0956796807006326},
  abstract = {In this article, we introduce Applicative functors \textendash{} an abstract characterisation of an applicative style of effectful programming, weaker than Monads and hence more widespread. Indeed, it is the ubiquity of this programming pattern that drew us to the abstraction. We retrace our steps in this article, introducing the applicative pattern by diverse examples, then abstracting it to define the Applicative type class and introducing a bracket notation that interprets the normal application syntax in the idiom of an Applicative functor. Furthermore, we develop the properties of applicative functors and the generic operations they support. We close by identifying the categorical structure of applicative functors and examining their relationship both with Monads and with Arrow.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/8YRF2M33/Mcbride and Paterson - 2008 - Applicative programming with effects.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/QXKBISRB/Applicative.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/PRUQ5D4T/C80616ACD5687ABDC86D2B341E83D298.html},
  journal = {Journal of Functional Programming},
  keywords = {Applicative Functors,Haskell},
  language = {en},
  number = {1}
}

@article{millerIsomorphismClassificationCountable2019,
  title = {Isomorphism and Classification for Countable Structures},
  author = {Miller, Russell},
  year = {2019},
  month = jun,
  volume = {8},
  pages = {99--117},
  issn = {22113576, 22113568},
  doi = {10.3233/COM-180095},
  abstract = {We introduce a topology on the space of all isomorphism types represented in a given class of countable models, and use this topology as an aid in classifying the isomorphism types. This mixes ideas from effective descriptive set theory and computable structure theory, extending concepts from the latter beyond computable structures to examine the isomorphism problem on arbitrary countable structures. We give examples using specific classes of fields and of trees, illustrating how the new concepts can yield classifications that reveal differences between seemingly similar classes. Finally, we use a computable homeomorphism to define a measure on the space of isomorphism types of algebraic fields, and examine the prevalence of relative computable categoricity under this measure.},
  archivePrefix = {arXiv},
  eprint = {1707.02506},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/LXGICQLV/Miller - 2019 - Isomorphism and classification for countable struc.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/TG4AWT7P/1707.html},
  journal = {Computability},
  keywords = {03D45 (primary); 03D78 (secondary),Mathematics - Logic},
  number = {2}
}

@article{moggiNotionsComputationMonads1991a,
  ids = {moggiNotionsComputationMonads1991,moggiNotionsComputationMonads1991b},
  title = {Notions of Computation and Monads},
  author = {Moggi, Eugenio},
  year = {1991},
  month = jul,
  volume = {93},
  pages = {55--92},
  issn = {0890-5401},
  doi = {10.1016/0890-5401(91)90052-4},
  abstract = {The {$\lambda$}-calculus is considered a useful mathematical tool in the study of programming languages, since programs can be identified with {$\lambda$}-terms. However, if one goes further and uses {$\beta\eta$}-conversion to prove equivalence of programs, then a gross simplification is introduced (programs are identified with total functions from values to values) that may jeopardise the applicability of theoretical results. In this paper we introduce calculi, based on a categorical semantics for computations, that provide a correct basis for proving equivalence of programs for a wide range of notions of computation.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/4GQ3QKNZ/Moggi - 1991 - Notions of computation and monads.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/DBYXVEW6/Moggi - 1991 - Notions of computation and monads.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/TEPXGJHA/Moggi - 1991 - Notions of computation and monads.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/CG9Q7C68/0890540191900524.html},
  journal = {Information and Computation},
  language = {en},
  number = {1},
  series = {Selections from 1989 {{IEEE Symposium}} on {{Logic}} in {{Computer Science}}}
}

@inproceedings{mortbergCubicalSyntheticHomotopy2020a,
  title = {Cubical Synthetic Homotopy Theory},
  booktitle = {Proceedings of the 9th {{ACM SIGPLAN International Conference}} on {{Certified Programs}} and {{Proofs}}},
  author = {M{\"o}rtberg, Anders and Pujet, Lo{\"i}c},
  year = {2020},
  month = jan,
  pages = {158--171},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3372885.3373825},
  abstract = {Homotopy type theory is an extension of type theory that enables synthetic reasoning about spaces and homotopy theory. This has led to elegant computer formalizations of multiple classical results from homotopy theory. However, many proofs are still surprisingly complicated to formalize. One reason for this is the axiomatic treatment of univalence and higher inductive types which complicates synthetic reasoning as many intermediate steps, that could hold simply by computation, require explicit arguments. Cubical type theory offers a solution to this in the form of a new type theory with native support for both univalence and higher inductive types. In this paper we show how the recent cubical extension of Agda can be used to formalize some of the major results of homotopy type theory in a direct and elegant manner.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/3LV27CJ4/M√∂rtberg and Pujet - 2020 - Cubical synthetic homotopy theory.pdf},
  isbn = {978-1-4503-7097-4},
  keywords = {Constructive Mathematics,Cubical Type Theory,Homotopy Type Theory,Synthetic Homotopy Theory},
  series = {{{CPP}} 2020}
}

@inproceedings{nipkowProofPearlDefining2005,
  title = {Proof {{Pearl}}: {{Defining Functions}} over {{Finite Sets}}},
  shorttitle = {Proof {{Pearl}}},
  booktitle = {Theorem {{Proving}} in {{Higher Order Logics}}},
  author = {Nipkow, Tobias and Paulson, Lawrence C.},
  editor = {Hurd, Joe and Melham, Tom},
  year = {2005},
  pages = {385--396},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11541868_25},
  abstract = {Structural recursion over sets is meaningful only if the result is independent of the order in which the set's elements are enumerated. This paper outlines a theory of function definition for finite sets, based on the fold functionals often used with lists. The fold functional is introduced as a relation, which is then shown to denote a function under certain conditions. Applications include summation and maximum. The theory has been formalized using Isabelle/HOL .},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/T4BV28HP/Nipkow and Paulson - 2005 - Proof Pearl Defining Functions over Finite Sets.pdf},
  isbn = {978-3-540-31820-0},
  keywords = {Commutative Monoids,Distributive Lattice,Recursion Equation,Recursion Rule,Unit Element},
  language = {en},
  series = {Lecture {{Notes}} in {{Computer Science}}}
}

@inproceedings{norellDependentlyTypedProgramming2008,
  title = {Dependently Typed Programming in {{Agda}}},
  booktitle = {Proceedings of the 6th International Conference on {{Advanced}} Functional Programming},
  author = {Norell, Ulf},
  year = {2008},
  month = may,
  pages = {230--266},
  publisher = {{Springer-Verlag}},
  address = {{Heijen, The Netherlands}},
  isbn = {978-3-642-04651-3},
  series = {{{AFP}}'08}
}

@inproceedings{oconnorApplicationsApplicativeProof2016,
  title = {Applications of {{Applicative Proof Search}}},
  booktitle = {Proceedings of the 1st {{International Workshop}} on {{Type}}-{{Driven Development}}},
  author = {O'Connor, Liam},
  year = {2016},
  pages = {43--55},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2976022.2976030},
  abstract = {In this paper, we develop a library of typed proof search procedures, and demonstrate their remarkable utility as a mechanism for proof-search and automation. We describe a framework for describing proof-search procedures in Agda, with a library of tactical combinators based on applicative functors. This framework is very general, so we demonstrate the approach with two common applications from the field of software verification: a library for property-based testing in the style of SmallCheck, and the embedding of a basic model checker inside our framework, which we use to verify the correctness of common concurrency algorithms.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/L9AIHCP8/O'Connor - 2016 - Applications of Applicative Proof Search.pdf},
  isbn = {978-1-4503-4435-7},
  keywords = {Agda,automation,concurrency,critical section,model checking,proof,properties,testing},
  series = {{{TyDe}} 2016}
}

@inproceedings{parmannInvestigatingStreamlessSets2015,
  title = {Investigating {{Streamless Sets}}},
  booktitle = {20th {{International Conference}} on {{Types}} for {{Proofs}} and {{Programs}} ({{TYPES}} 2014)},
  author = {Parmann, Erik},
  editor = {Herbelin, Hugo and Letouzey, Pierre and Sozeau, Matthieu},
  year = {2015},
  volume = {39},
  pages = {187--201},
  publisher = {{Schloss Dagstuhl\textendash Leibniz-Zentrum fuer Informatik}},
  address = {{Dagstuhl, Germany}},
  doi = {10.4230/LIPIcs.TYPES.2014.187},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/9I9NE9JP/Parmann - 2015 - Investigating Streamless Sets.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/TYQSY7X3/5497.html},
  isbn = {978-3-939897-88-0},
  keywords = {Constructive Logic,Finite Sets,Type theory},
  series = {Leibniz {{International Proceedings}} in {{Informatics}} ({{LIPIcs}})}
}

@article{prestonNotesFiniteSets2018,
  title = {Some {{Notes}} on {{Finite Sets}}},
  author = {Preston, Chris},
  year = {2018},
  month = apr,
  abstract = {These notes aim to give a gentle account to one approach to the theory of finite sets without making use of the natural numbers. They were written to be used as the basis for a student seminar. There are no real prerequisites except for a certain familiarity with the kind of mathematics seen in the first couple of years of a university mathematics course. The definition of being finite employed in these notes is usually called Kuratowski-finiteness and it is essentially that employed by Whitehead and Russell in Principia Mathematica. This is a revised and extended version of a paper with the same title from November 2015},
  archivePrefix = {arXiv},
  eprint = {1509.02747},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/F34DBIFE/Preston - 2018 - Some Notes on Finite Sets.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/NAA5C7YW/1509.html},
  journal = {arXiv:1509.02747 [math]},
  keywords = {Mathematics - History and Overview},
  primaryClass = {math}
}

@inproceedings{restGenericEnumeratorsExtended2019,
  title = {Generic {{Enumerators}} ({{Extended Abstract}})},
  booktitle = {Proceedings of the 4th {{ACM SIGPLAN International Workshop}} on {{Type}}-{{Driven Development}}},
  author = {van der Rest, Cas and Swierstra, Wouter and Chakravarty, Manuel MT},
  year = {2019},
  month = aug,
  pages = {3},
  publisher = {{Association for Computing Machinery}},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/QHY9CXNP/Generic Enumerators (Extended Abstract).pdf},
  language = {en},
  series = {{{TyDe}} 2019}
}

@article{rijkeSetsHomotopyType2015,
  ids = {rijkeSetsHomotopyType2015a},
  title = {Sets in Homotopy Type Theory},
  author = {Rijke, Egbert and Spitters, Bas},
  year = {2015},
  month = jun,
  volume = {25},
  pages = {1172--1202},
  issn = {0960-1295, 1469-8072},
  doi = {10.1017/S0960129514000553},
  abstract = {Homotopy Type Theory may be seen as an internal language for the {$\infty$}-category of weak {$\infty$}-groupoids. Moreover, weak {$\infty$}-groupoids model the univalence axiom. Voevodsky proposes this (language for) weak {$\infty$}groupoids as a new foundation for mathematics called the univalent foundations. It includes the sets as weak {$\infty$}-groupoids with contractible connected components, and thereby it includes (much of) the traditional set theoretical foundations as a special case. We thus wonder whether those `discrete' groupoids do in fact form a (predicative) topos. More generally, homotopy type theory is conjectured to be the internal language of `elementary' of {$\infty$}-toposes. We prove that sets in homotopy type theory form a {$\Pi$}W-pretopos. This is similar to the fact that the 0-truncation of an {$\infty$}topos is a topos. We show that both a subobject classifier and a 0-object classifier are available for the type theoretical universe of sets. However, both of these are large and moreover the 0-object classifier for sets is a function between 1-types (i.e. groupoids) rather than between sets. Assuming an impredicative propositional resizing rule we may render the subobject classifier small and then we actually obtain a topos of sets.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/F4X85CSL/Rijke and Spitters - 2015 - Sets in homotopy type theory.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/HBVEAFDW/Rijke and Spitters - 2015 - Sets in homotopy type theory ‚Ä†.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/7K52IRMW/12923C0993730DE101029B542D66F736.html},
  journal = {Mathematical Structures in Computer Science},
  language = {en},
  number = {5}
}

@inproceedings{runcimanSmallCheckLazySmallCheck2008,
  title = {{{SmallCheck}} and {{Lazy SmallCheck}}: Automatic Exhaustive Testing for Small Values},
  shorttitle = {{{SmallCheck}} and {{Lazy SmallCheck}}},
  booktitle = {In {{Haskell}}'08: {{Proceedings}} of the First {{ACM SIGPLAN}} Symposium on {{Haskell}}},
  author = {Runciman, Colin and Naylor, Matthew and Lindblad, Fredrik},
  year = {2008},
  volume = {44},
  pages = {37--48},
  publisher = {{ACM}},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/64VKI2M7/Runciman et al. - 2008 - SmallCheck and Lazy SmallCheck.pdf}
}

@inproceedings{smolkaHereditarilyFiniteSets2016,
  ids = {smolkaHereditarilyFiniteSets2016,smolkaHereditarilyFiniteSets2016a},
  title = {Hereditarily {{Finite Sets}} in {{Constructive Type Theory}}},
  booktitle = {Interactive {{Theorem Proving}}},
  author = {Smolka, Gert and Stark, Kathrin},
  editor = {Blanchette, Jasmin Christian and Merz, Stephan},
  year = {2016},
  pages = {374--390},
  publisher = {{Springer International Publishing}},
  abstract = {We axiomatize hereditarily finite sets in constructive type theory and show that all models of the axiomatization are isomorphic. The axiomatization takes the empty set and adjunction as primitives and comes with a strong induction principle. Based on the axiomatization, we construct the set operations of ZF and develop the basic theory of finite ordinals and cardinality. We construct a model of the axiomatization as a quotient of an inductive type of binary trees. The development is carried out in Coq.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/4TF4N39F/Smolka and Stark - 2016 - Hereditarily Finite Sets in Constructive Type Theo.pdf},
  isbn = {978-3-319-43144-4},
  keywords = {Binary Tree,Induction Principle,Inductive Type,Transitive Closure,Type Theory},
  language = {en},
  series = {Lecture {{Notes}} in {{Computer Science}}}
}

@article{solovevCategoryFiniteSets1983,
  title = {The Category of Finite Sets and {{Cartesian}} Closed Categories},
  author = {Solov'ev, S. V.},
  year = {1983},
  month = jun,
  volume = {22},
  pages = {1387--1400},
  issn = {1573-8795},
  doi = {10.1007/BF01084396},
  abstract = {Applying methods of the proof theory, it is shown that two canonical morphisms are equal in all Cartesian closed categories if and only if some of their realizations in the category of finite sets are equal. All realizations of formal combinations of objects using the functors x and hom are isomorphic in all Cartesian closed categories if and only if some of their realizations in the category of finite sets are isomorphic. On the base of these results, a purely syntactic decision algorithm for (extensional) isomorphism of formal combinations of objects and a new decision algorithm for equality of canonical morphisms are obtained.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/N88ADXYU/Solov'ev - 1983 - The category of finite sets and Cartesian closed c.pdf},
  journal = {Journal of Soviet Mathematics},
  keywords = {Canonical Morphism,Closed Category,Decision Algorithm,Formal Combination,Proof Theory},
  language = {en},
  number = {3}
}

@article{spittersCubicalSetsTopological2016,
  ids = {spittersCubicalSetsTopological2016a},
  title = {Cubical Sets and the Topological Topos},
  author = {Spitters, Bas},
  year = {2016},
  month = oct,
  abstract = {Coquand's cubical set model for homotopy type theory provides the basis for a computational interpretation of the univalence axiom and some higher inductive types, as implemented in the cubical proof assistant. This paper contributes to the understanding of this model. We make three contributions: 1. Johnstone's topological topos was created to present the geometric realization of simplicial sets as a geometric morphism between toposes. Johnstone shows that simplicial sets classify strict linear orders with disjoint endpoints and that (classically) the unit interval is such an order. Here we show that it can also be a target for cubical realization by showing that Coquand's cubical sets classify the geometric theory of flat distributive lattices. As a side result, we obtain a simplicial realization of a cubical set. 2. Using the internal `interval' in the topos of cubical sets, we construct a Moore path model of identity types. 3. We construct a premodel structure internally in the cubical type theory and hence on the fibrant objects in cubical sets.},
  archivePrefix = {arXiv},
  eprint = {1610.05270},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/AXAM2AVY/Spitters - 2016 - Cubical sets and the topological topos.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/R2K3HW4Y/Spitters - 2016 - Cubical sets and the topological topos.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/F8GA7YC8/1610.html;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/KBVB56YE/1610.html},
  journal = {arXiv:1610.05270 [cs, math]},
  keywords = {03B70 (logic in computer science); 03B15 (higher-order logic and type theory); 55U35 (abstract and axiomatic homotopy theory),Computer Science - Logic in Computer Science,F.4.1,Mathematics - Category Theory,Mathematics - Logic},
  primaryClass = {cs, math}
}

@book{stumpVerifiedFunctionalProgramming2016,
  title = {Verified {{Functional Programming}} in {{Agda}}},
  author = {Stump, Aaron},
  year = {2016},
  publisher = {{Association for Computing Machinery and Morgan \& Claypool}},
  address = {{New York, NY, USA}},
  abstract = {Agda is an advanced programming language based on Type Theory. Agda's type system is expressive enough to support full functional verification of programs, in two styles. In external verification, we write pure functional programs and then write proofs of properties about them. The proofs are separate external artifacts, typically using structural induction. In internal verification, we specify properties of programs through rich types for the programs themselves. This often necessitates including proofs inside code, to show the type checker that the specified properties hold. The power to prove properties of programs in these two styles is a profound addition to the practice of programming, giving programmers the power to guarantee the absence of bugs, and thus improve the quality of software more than previously possible. Verified Functional Programming in Agda is the first book to provide a systematic exposition of external and internal verification in Agda, suitable for undergraduate students of Computer Science. No familiarity with functional programming or computer-checked proofs is presupposed.  The book begins with an introduction to functional programming through familiar examples like booleans, natural numbers, and lists, and techniques for external verification. Internal verification is considered through the examples of vectors, binary search trees, and Braun trees. More advanced material on type-level computation, explicit reasoning about termination, and normalization by evaluation is also included. The book also includes a medium-sized case study on Huffman encoding and decoding.},
  isbn = {978-1-970001-27-3}
}

@article{swensonConstructiveProofCountability1987,
  title = {A Constructive Proof of the Countability of {{$\Sigma$}} {\textsuperscript{*}}},
  author = {Swenson, James M.},
  year = {1987},
  month = jul,
  volume = {18},
  pages = {48--50},
  issn = {01635700},
  doi = {10.1145/36068.36069},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/KHUU622H/Swenson - 1987 - A constructive proof of the countability of Œ£ sup.pdf},
  journal = {ACM SIGACT News},
  language = {en},
  number = {4}
}

@misc{thecoqdevelopmentteamCoqProofAssistant2020,
  title = {The {{Coq Proof Assistant}}, Version 8.11.0},
  author = {The Coq Development Team},
  year = {2020},
  month = jan,
  doi = {10.5281/zenodo.3744225},
  abstract = {Coq is a formal proof management system. It provides a formal language to write mathematical definitions, executable algorithms and theorems together with an environment for semi-interactive development of machine-checked proofs. Typical applications include the certification of properties of programming languages (e.g. the CompCert compiler certification project, or the Bedrock verified low-level programming library), the formalization of mathematics (e.g. the full formalization of the Feit-Thompson theorem or homotopy type theory) and teaching. The main changes brought by Coq version 8.11 are: Ltac2, a new tactic language for writing more robust larger scale tactics, with built-in support for datatypes and the multi-goal tactic monad. Primitive floats are integrated in terms and follow the binary64 format of the IEEE 754 standard, as specified in the Coq.Float.Floats library. Cleanups of the section mechanism, delayed proofs and further restrictions of template polymorphism to fix soundness issues related to universes. New unsafe flags to disable locally guard, positivity and universe checking. Reliance on these flags is always printed by Print Assumptions. Fixed bugs of Export and Import that can have a significant impact on user developments (common source of incompatibility!). New interactive development method based on vos interface files, allowing to work on a file without recompiling the proof parts of their dependencies. New Arguments annotation for bidirectional type inference configuration for reference (e.g. constants, inductive) applications. New refine attribute for Instance can be used instead of the removed Refine Instance Mode. Generalization of the under and over tactics of SSReflect to arbitrary relations. Revision of the Coq.Reals library, its axiomatisation and instances of the constructive and classical real numbers. Additionally, while the omega tactic is not yet deprecated in this version of Coq, it should soon be the case and we already recommend users to switch to lia in new proof scripts (see also the warning message in the corresponding chapter). The dev/doc/critical-bugs file documents the known critical bugs of Coq and affected releases. See the Changes in 8.11+beta1 section and following sections for the detailed list of changes, including potentially breaking changes marked with Changed. Coq's documentation is available at https://coq.github.io/doc/v8.11/api (documentation of the ML API), https://coq.github.io/doc/v8.11/refman (reference manual), and https://coq.github.io/doc/v8.11/stdlib (documentation of the standard library). Maxime D\'en\`es, Emilio Jes\'us Gallego Arias, Ga\"etan Gilbert, Michael Soegtrop and Th\'eo Zimmermann worked on maintaining and improving the continuous integration system and package building infrastructure. The OPAM repository for Coq packages has been maintained by Guillaume Claret, Karl Palmskog, Matthieu Sozeau and Enrico Tassi with contributions from many users. A list of packages is available at https://coq.inria.fr/opam/www/. The 61 contributors to this version are Michael D. Adams, Guillaume Allais, Helge Bahmann, Langston Barrett, Guillaume Bertholon, Fr\'ed\'eric Besson, Simon Boulier, Michele Caci, Tej Chajed, Arthur Chargu\'eraud, Cyril Cohen, Fr\'ed\'eric Dabrowski, Arthur Azevedo de Amorim, Maxime D\'en\`es, Nikita Eshkeev, Jim Fehrle, Emilio Jes\'us Gallego Arias, Paolo G. Giarrusso, Ga\"etan Gilbert, Georges Gonthier, Jason Gross, Samuel Gruetter, Arma\"el Gu\'eneau, Hugo Herbelin, Florent Hivert, Jasper Hugunin, Shachar Itzhaky, Jan-Oliver Kaiser, Robbert Krebbers, Vincent Laporte, Olivier Laurent, Samuel Leli\`evre, Nicholas Lewycky, Yishuai Li, Jose Fernando Lopez Fernandez, Andreas Lynge, Kenji Maillard, Erik Martin-Dorel, Guillaume Melquiond, Alexandre Moine, Oliver Nash, Wojciech Nawrocki, Antonio Nikishaev, Pierre-Marie P\'edrot, Cl\'ement Pit-Claudel, Lars Rasmusson, Robert Rand, Talia Ringer, JP Rodi, Pierre Roux, Kazuhiko Sakaguchi, Vincent Semeria, Michael Soegtrop, Matthieu Sozeau, spanjel, Claude Stolze, Enrico Tassi, Laurent Th\'ery, James R. Wilcox, Xia Li-yao, Th\'eo Zimmermann Many power users helped to improve the design of the new features via the issue and pull request system, the Coq development mailing list, the coq-club@inria.fr mailing list or the Discourse forum. It would be impossible to mention exhaustively the names of everybody who to some extent influenced the development. Version 8.11 is the sixth release of Coq developed on a time-based development cycle. Its development spanned 3 months from the release of Coq 8.10. Pierre-Marie P\'edrot is the release manager and maintainer of this release, assisted by Matthieu Sozeau. This release is the result of 2000+ commits and 300+ PRs merged, closing 75+ issues.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/89GA4ICE/The Coq Development Team - 2020 - The Coq Proof Assistant, version 8.11.0.pdf},
  howpublished = {Zenodo},
  keywords = {formal proofs,mathematical software,proof assistant},
  language = {eng}
}

@article{uszkaySpeciesMakingAnalytic2008,
  title = {Species: Making Analytic Functors Practical for Functional Programming},
  author = {Uszkay, Jacques Carette Gordon},
  year = {2008},
  pages = {24},
  abstract = {Inspired by Joyals theory of species, we show how to add new type constructors and constructor combinators to the tool set of functional languages. We show that all the important properties of inductive types lift to this new setting. Species are analytic functors, representing a broader range of structures than regular functors. This includes structures such as bags, cycles and graphs. The theory is greatly inspired by combinatorics rather than type theory: this adds interesting new tools to bear, but also requires more work on our part to show that species form a good foundations for a theory of type constructors. The combinatorial tools provide a calculus for these structures which has strong links with classical analysis, via a functorial interpretation of generating series. Furthermore, we show how generic programming idioms also generalise to this richer setting. Once the theory is understood, various methods of implementation are relatively straightforward.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/KEERIL44/Uszkay - Species making analytic functors practical for fu.pdf},
  language = {en}
}

@article{uustaluFinitenessRationalSequences2017,
  ids = {uustaluFinitenessRationalSequences2017,uustaluFinitenessRationalSequences2017b},
  title = {Finiteness and Rational Sequences, Constructively*},
  author = {Uustalu, Tarmo and Veltri, Niccol{\`o}},
  year = {2017/ed},
  volume = {27},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S0956796817000041},
  abstract = {Rational sequences are possibly infinite sequences with a finite number of distinct suffixes. In this paper, we present different implementations of rational sequences in Martin\textendash L\"of type theory. First, we literally translate the above definition of rational sequence into the language of type theory, i.e., we construct predicates on possibly infinite sequences expressing the finiteness of the set of suffixes. In type theory, there exist several inequivalent notions of finiteness. We consider two of them, listability and Noetherianness, and show that in the implementation of rational sequences the two notions are interchangeable. Then we introduce the type of lists with backpointers, which is an inductive implementation of rational sequences. Lists with backpointers can be unwound into rational sequences, and rational sequences can be truncated into lists with backpointers. As an example, we see how to convert the fractional representation of a rational number into its decimal representation and vice versa.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/78BDBIHC/Uustalu and Veltri - 2017 - Finiteness and rational sequences, constructively.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/NDJGV6GD/Uustalu and Veltri - 2017 - Finiteness and rational sequences, constructively.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/M9TH72I2/FCC024B602F850DDCEB2E9092E72369B.html;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/VI9F4EKI/FCC024B602F850DDCEB2E9092E72369B.html},
  journal = {Journal of Functional Programming},
  language = {en}
}

@article{vezzosiCubicalAgdaDependently2019,
  title = {Cubical {{Agda}}: {{A Dependently Typed Programming Language}} with {{Univalence}} and {{Higher Inductive Types}}},
  shorttitle = {Cubical {{Agda}}},
  author = {Vezzosi, Andrea and M{\"o}rtberg, Anders and Abel, Andreas},
  year = {2019},
  month = jul,
  volume = {3},
  pages = {87:1--87:29},
  issn = {2475-1421},
  doi = {10.1145/3341691},
  abstract = {Proof assistants based on dependent type theory provide expressive languages for both programming and proving within the same system. However, all of the major implementations lack powerful extensionality principles for reasoning about equality, such as function and propositional extensionality. These principles are typically added axiomatically which disrupts the constructive properties of these systems. Cubical type theory provides a solution by giving computational meaning to Homotopy Type Theory and Univalent Foundations, in particular to the univalence axiom and higher inductive types. This paper describes an extension of the dependently typed functional programming language Agda with cubical primitives, making it into a full-blown proof assistant with native support for univalence and a general schema of higher inductive types. These new primitives make function and propositional extensionality as well as quotient types directly definable with computational content. Additionally, thanks also to copatterns, bisimilarity is equivalent to equality for coinductive types. This extends Agda with support for a wide range of extensionality principles, without sacrificing type checking and constructivity.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/MIGACFXE/Vezzosi et al. - 2019 - Cubical Agda A Dependently Typed Programming Lang.pdf},
  journal = {Proc. ACM Program. Lang.},
  keywords = {Cubical Type Theory,Dependent Pattern Matching,Higher Inductive Types,Univalence},
  number = {ICFP}
}

@article{wadlerPropositionsTypes2015,
  title = {Propositions {{As Types}}},
  author = {Wadler, Philip},
  year = {2015},
  month = nov,
  volume = {58},
  pages = {75--84},
  issn = {0001-0782},
  doi = {10.1145/2699407},
  abstract = {Connecting mathematical logic and computation, it ensures that some aspects of programming are absolute.},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/6QXRH73L/propositions-as-types.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/X6HFPXQN/propositions-as-types.pdf},
  journal = {Commun. ACM},
  number = {12}
}

@phdthesis{yorgeyCombinatorialSpeciesLabelled2014,
  ids = {yorgeyCombinatorialSpeciesLabelled},
  title = {Combinatorial Species and Labelled Structures},
  author = {Yorgey, Brent Abraham},
  year = {2014},
  month = jan,
  address = {{Pennsylvania}},
  file = {/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/HKVID4C5/Yorgey - Combinatorial Species and Labelled Structures.pdf;/Users/doisinkidney/Library/Mobile Documents/com~apple~CloudDocs/Zotero/storage/N3EFPDGI/AAI3668177.html},
  language = {en},
  school = {University of Pennsylvania}
}


